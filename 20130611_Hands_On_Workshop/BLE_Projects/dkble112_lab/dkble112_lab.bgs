# ================================================================
# BGScript demo: DKBLE112 Lab Demo
# Jeff Rowberg <jeff.rowberg@bluegiga.com>
# ----------------------------------------------------------------
#
# CHANGELOG:
#   2013-06-08 - Initial release
#
# ================================================================

# variables used by the application
dim ascii(26)
dim mac_addr(6)
dim tmp(5)
dim celsius
dim offset
dim advertising
dim gpio_delta
dim a
dim b
dim c

# initialize GAP mode (advertising), bonding and start freerunning times on system boot
event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)
    # get Bluetooth MAC address of this device (NOTE: this is little-endian!)
    call system_address_get()(mac_addr(0:6))
    
    # enable bonding for demo purposes
    call sm_set_bondable_mode(1)
    
    # initialize advertising status to 0 (not advertising)
    advertising = 0
    
    # initialize simple GPIO debouncing test var to 0
    gpio_delta = 0

    # build device name as "DKBLE112 001122:334455"
    ascii(0:1) = $44 # 'D'
    ascii(1:1) = $4B # 'K'
    ascii(2:1) = $42 # 'B'
    ascii(3:1) = $4C # 'L'
    ascii(4:1) = $45 # 'E'
    ascii(5:1) = $31 # '1'
    ascii(6:1) = $31 # '1'
    ascii(7:1) = $32 # '2'
    ascii(8:1) = $20 # ' '

    ascii( 9:1) = (mac_addr(5:1)/$10) + 48 + ((mac_addr(5:1)/$10)/10*7) # MAC byte 1 10's digit
    ascii(10:1) = (mac_addr(5:1)&$f)  + 48 + ((mac_addr(5:1)&$f )/10*7) # MAC byte 1 1's digit
    ascii(11:1) = (mac_addr(4:1)/$10) + 48 + ((mac_addr(4:1)/$10)/10*7) # MAC byte 2 10's digit
    ascii(12:1) = (mac_addr(4:1)&$f)  + 48 + ((mac_addr(4:1)&$f )/10*7) # MAC byte 2 1's digit
    ascii(13:1) = (mac_addr(3:1)/$10) + 48 + ((mac_addr(3:1)/$10)/10*7) # MAC byte 3 10's digit
    ascii(14:1) = (mac_addr(3:1)&$f)  + 48 + ((mac_addr(3:1)&$f )/10*7) # MAC byte 3 1's digit
    ascii(15:1) = $3a # ':'
    ascii(16:1) = (mac_addr(2:1)/$10) + 48 + ((mac_addr(2:1)/$10)/10*7) # MAC byte 4 10's digit
    ascii(17:1) = (mac_addr(2:1)&$f)  + 48 + ((mac_addr(2:1)&$f )/10*7) # MAC byte 4 1's digit
    ascii(18:1) = (mac_addr(1:1)/$10) + 48 + ((mac_addr(1:1)/$10)/10*7) # MAC byte 5 10's digit
    ascii(19:1) = (mac_addr(1:1)&$f)  + 48 + ((mac_addr(1:1)&$f )/10*7) # MAC byte 5 1's digit
    ascii(20:1) = (mac_addr(0:1)/$10) + 48 + ((mac_addr(0:1)/$10)/10*7) # MAC byte 6 10's digit
    ascii(21:1) = (mac_addr(0:1)&$f)  + 48 + ((mac_addr(0:1)&$f )/10*7) # MAC byte 6 1's digit
    
    # write device name
    call attributes_write(c_device_name, 0, 22, ascii(0:22))

    # enable interrupt on P0_0 and P0_1 rising edge
    # (parameters are port=0, bitmask=0b00000011, edge=rising)
    call hardware_io_port_config_irq(0, 3, 0)

    # set timer to periodically create an interrupt with interval of 1 second
    call hardware_set_soft_timer(32768, 0, 0)

    # update pre-populated device name so we can reuse a portion of it for the LCD
    ascii(6:1) = $42 # 'B'
    ascii(7:1) = $47 # 'G'
    
    # initialize and populate SPI-connected LCD
    call hardware_io_port_write(1, $7, $1)                  # set the display to command mode
    call hardware_io_port_config_direction(1, $7)           # configure P1_0/1/2 as outputs

    call hardware_spi_transfer(0, 11, "\x30\x30\x30\x39\x14\x56\x6d\x70\x0c\x06\x01")   # initialize the display
    call hardware_spi_transfer(0, 1, "\x80")                # change display cursor pos
    call hardware_io_port_write(1, $7, $3)                  # set the display to data mode
    call hardware_spi_transfer(0, 16, ascii(6:16))          # write demo title to display

    call hardware_io_port_write(1, $7, $1)                  # set the display to command mode
    call hardware_spi_transfer(0, 1, "\xc0")                # change display cursor pos
    call hardware_io_port_write(1, $7, $3)                  # set the display to data mode
    call hardware_spi_transfer(0, 16, "STANDBY         ")   # write status to display
end

# timer "tick" event
event hardware_soft_timer(handle)
    # request ADC reading on ADC channel 14 (special internal temperature sensor)
    # using highest decimation (12-bit signed reading) and internal 1.24v fixed reference
    call hardware_adc_read(14, 3, 0)
end

# ADC measurement ready
event hardware_adc_result(input,value)
    offset = -1500

    # ADC value is 12 MSB
    celsius = value / 16

    # calculate temperature
    # ADC * V_ref/ADC_max / T_coeff + offset
    celsius = (10 * celsius * 1150/2047) * 10/45 + offset

    # set flags
    tmp(0:1) = 0

    # set as 32-bit float (<celsius> * 10^-1)
    tmp(1:4) = float(celsius, -1)

    # write the temperature information to the GATT database
    call attributes_write(xgatt_temperature_celsius, 0, 5, tmp(0:5))

    # extract decimals from integer
    a = (celsius / 100)                        #2X.X
    b = (celsius / 10) + (a*-10)            #X4.X
    c = (celsius)      + (a*-100) + (b*-10)    #XX.8

    # +48 is for decimal -> ASCII
    ascii(0:1) = a + 48 # "2"
    ascii(1:1) = b + 48 # "4"
    ascii(2:1) = 46     # "."
    ascii(3:1) = c + 48 # "8"
    ascii(4:1) = $df    # "deg"
    ascii(5:1) = 67     # "C"

    # display temperature
    call hardware_io_port_write(1, $7, $1)         # set the display to command mode
    call hardware_spi_transfer(0, 1, "\xca")       # change display cursor pos
    call hardware_io_port_write(1, $7, $3)         # set the display to data mode
    call hardware_spi_transfer(0, 6, ascii(0:6))   # write status to display
end

# catch button press for P0_0, P0_1, P1_6 (active HIGH configuration, hardware.xml pulls it low)
event hardware_io_port_status(timestamp, port, irq, state)
    # only accept this press if it's more then 100ms after the last one (32768 = 1 sec)
    if timestamp - gpio_delta > 3277 then
        if port = 0 then
            if (irq & 1) = 1 then
                # P0_0 is HIGH and the source of this interrupt
                if advertising = 0 then
                    # update advertising status to 1
                    advertising = 1
                    
                    # change LCD to reflect new state
                    call hardware_io_port_write(1, $7, $1)                  # set the display to command mode
                    call hardware_spi_transfer(0, 1, "\xc0")                # change display cursor pos
                    call hardware_io_port_write(1, $7, $3)                  # set the display to data mode
                    call hardware_spi_transfer(0, 7, "ADVERT ")             # write status to display

                    # start advertising in general discoverable / undirected connectable mode (standard)
                    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
                else
                    # update advertising status to 0
                    advertising = 0
                    
                    # change LCD to reflect new state
                    call hardware_io_port_write(1, $7, $1)                  # set the display to command mode
                    call hardware_spi_transfer(0, 1, "\xc0")                # change display cursor pos
                    call hardware_io_port_write(1, $7, $3)                  # set the display to data mode
                    call hardware_spi_transfer(0, 7, "STANDBY")             # write status to display

                    # stop advertising
                    call gap_set_mode(0, 0)
                end if
            end if
            if (irq & 2) = 2 then
                # P0_1 is HIGH and the source of this interrupt

                # change LCD to reflect new state
                call hardware_io_port_write(1, $7, $1)                  # set the display to command mode
                call hardware_spi_transfer(0, 1, "\xc0")                # change display cursor pos
                call hardware_io_port_write(1, $7, $3)                  # set the display to data mode
                call hardware_spi_transfer(0, 16, "DFU RESET       ")   # write status to display
                
                # reboot into DFU mode
                call system_reset(1)
            end if
        end if
        
        # update last delta to current time
        gpio_delta = timestamp
    end if
end

event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
    # check for "new connection established" event
    if (flags & $05) = $05 then
        # update advertising status to 0 (not advertising once connected)
        advertising = 0

        # change LCD to reflect new state
        call hardware_io_port_write(1, $7, $1)                  # set the display to command mode
        call hardware_spi_transfer(0, 1, "\xc0")                # change display cursor pos
        call hardware_io_port_write(1, $7, $3)                  # set the display to data mode
        call hardware_spi_transfer(0, 7, "CONNECT")             # write status to display
    end if
    
    # check for "encrypted" status (e.g. connected + bonded)
    if (flags & $02) = $02 then
        # change LCD to reflect new state
        call hardware_io_port_write(1, $7, $1)                  # set the display to command mode
        call hardware_spi_transfer(0, 1, "\xc0")                # change display cursor pos
        call hardware_io_port_write(1, $7, $3)                  # set the display to data mode
        call hardware_spi_transfer(0, 7, "ENCRYPT")             # write status to display
    end if
end

event connection_disconnected(handle, result)
    # if disconnected, return to advertisement mode (disabled for lab environment)
    #call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)

    # change LCD to reflect new state
    call hardware_io_port_write(1, $7, $1)                  # set the display to command mode
    call hardware_spi_transfer(0, 1, "\xc0")                # change display cursor pos
    call hardware_io_port_write(1, $7, $3)                  # set the display to data mode
    call hardware_spi_transfer(0, 7, "STANDBY")             # write status to display
end
